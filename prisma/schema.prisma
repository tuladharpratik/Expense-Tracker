//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BudgetType {
  NEEDS
  WANTS
  SAVINGS
}

enum AccountType {
  USER
  ADMIN
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetAllocationStrategy {
  FIFTY_THIRTY_TWENTY
  CUSTOM
}

model User {
  id               String                @id() @default(cuid())
  email            String                @unique()
  password         String
  username         String                @unique()
  accountType      AccountType           @default(USER)
  createdAt        DateTime              @default(now())
  transactions     Transaction[]
  budgetPreference UserBudgetPreference?
  monthlyBudgets   MonthlyIncomeBudget[]
  savingGoals      SavingGoal[]
}

model Transaction {
  id           String          @id() @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  amount       Float
  type         TransactionType
  category     Category?       @relation(fields: [categoryId], references: [id])
  categoryId   String?
  description  String?
  source       String?
  createdAt    DateTime        @default(now())
  date         DateTime        @default(now())
  savingGoal   SavingGoal?     @relation(fields: [savingGoalId], references: [id])
  savingGoalId String?
}

model Category {
  id           String        @id() @default(cuid())
  name         String        @unique()
  budgetType   BudgetType
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt()
  transactions Transaction[]
  savingGoals  SavingGoal[]
}

model UserBudgetPreference {
  id                String                   @id() @default(cuid())
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String                   @unique()
  strategy          BudgetAllocationStrategy @default(FIFTY_THIRTY_TWENTY)
  needsPercentage   Float                    @default(50)
  wantsPercentage   Float                    @default(30)
  savingsPercentage Float                    @default(20)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt()
}

model MonthlyIncomeBudget {
  id            String   @id() @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  monthYear     DateTime
  totalIncome   Float
  needsBudget   Float
  wantsBudget   Float
  savingsBudget Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  @@unique([userId, monthYear])
}

model SavingGoal {
  id            String        @id() @default(cuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  name          String
  targetAmount  Float
  currentAmount Float         @default(0)
  deadline      DateTime?
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    String
  note          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  transactions  Transaction[]
}
