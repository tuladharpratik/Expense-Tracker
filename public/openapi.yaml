openapi: 3.1.0
info:
  title: Personal Finance Management System API
  version: 1.0.0
tags:
  - name: user
    description: User operations
  - name: transaction
    description: Transaction operations
  - name: income
    description: Income operations
  - name: expense
    description: Expense operations
  - name: category
    description: Category operations
  - name: subscription
    description: Subscription operations
  - name: debt
    description: Debt operations
  - name: userBudgetPreference
    description: UserBudgetPreference operations
  - name: monthlyIncomeBudget
    description: MonthlyIncomeBudget operations
  - name: anomalyPreference
    description: AnomalyPreference operations
paths:
  /api/user:
    get:
      operationId: list-User
      description: List "User" resources
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    post:
      operationId: create-User
      description: Create a "User" resource
      tags:
        - user
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/user/{id}:
    get:
      operationId: fetch-User
      description: Fetch a "User" resource
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-put
      description: Update a "User" resource
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-patch
      description: Update a "User" resource
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-User
      description: Delete a "User" resource
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/incomes:
    get:
      operationId: fetch-User-related-incomes
      description: Fetch the related "incomes" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/incomes:
    get:
      operationId: fetch-User-relationship-incomes
      description: Fetch the "incomes" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-incomes-put
      description: Update "incomes" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-incomes-patch
      description: Update "incomes" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-incomes
      description: Create new "incomes" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/expenses:
    get:
      operationId: fetch-User-related-expenses
      description: Fetch the related "expenses" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/expenses:
    get:
      operationId: fetch-User-relationship-expenses
      description: Fetch the "expenses" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-expenses-put
      description: Update "expenses" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-expenses-patch
      description: Update "expenses" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-expenses
      description: Create new "expenses" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/subscriptions:
    get:
      operationId: fetch-User-related-subscriptions
      description: Fetch the related "subscriptions" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/subscriptions:
    get:
      operationId: fetch-User-relationship-subscriptions
      description: Fetch the "subscriptions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-subscriptions-put
      description: Update "subscriptions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-subscriptions-patch
      description: Update "subscriptions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-subscriptions
      description: Create new "subscriptions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/debts:
    get:
      operationId: fetch-User-related-debts
      description: Fetch the related "debts" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/debts:
    get:
      operationId: fetch-User-relationship-debts
      description: Fetch the "debts" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-debts-put
      description: Update "debts" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-debts-patch
      description: Update "debts" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-debts
      description: Create new "debts" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/transactions:
    get:
      operationId: fetch-User-related-transactions
      description: Fetch the related "transactions" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/transactions:
    get:
      operationId: fetch-User-relationship-transactions
      description: Fetch the "transactions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-transactions-put
      description: Update "transactions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-transactions-patch
      description: Update "transactions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-transactions
      description: Create new "transactions" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/budgetPreference:
    get:
      operationId: fetch-User-related-budgetPreference
      description: Fetch the related "budgetPreference" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/budgetPreference:
    get:
      operationId: fetch-User-relationship-budgetPreference
      description: Fetch the "budgetPreference" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-budgetPreference-put
      description: Update "budgetPreference" relationship for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-budgetPreference-patch
      description: Update "budgetPreference" relationship for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/monthlyBudgets:
    get:
      operationId: fetch-User-related-monthlyBudgets
      description: Fetch the related "monthlyBudgets" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/monthlyBudgets:
    get:
      operationId: fetch-User-relationship-monthlyBudgets
      description: Fetch the "monthlyBudgets" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email]
          required: false
          description: Equality filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$contains]
          required: false
          description: String contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$icontains]
          required: false
          description: String case-insensitive contains filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$search]
          required: false
          description: String full-text search filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$startsWith]
          required: false
          description: String startsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[email$endsWith]
          required: false
          description: String endsWith filter for "email"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password]
          required: false
          description: Equality filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$contains]
          required: false
          description: String contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$icontains]
          required: false
          description: String case-insensitive contains filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$search]
          required: false
          description: String full-text search filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$startsWith]
          required: false
          description: String startsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[password$endsWith]
          required: false
          description: String endsWith filter for "password"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username]
          required: false
          description: Equality filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$contains]
          required: false
          description: String contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$icontains]
          required: false
          description: String case-insensitive contains filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$search]
          required: false
          description: String full-text search filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$startsWith]
          required: false
          description: String startsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[username$endsWith]
          required: false
          description: String endsWith filter for "username"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[accountType]
          required: false
          description: Equality filter for "accountType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/Role"
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[incomes]
          required: false
          description: Equality filter for "incomes"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[debts]
          required: false
          description: Equality filter for "debts"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[budgetPreference]
          required: false
          description: Equality filter for "budgetPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthlyBudgets]
          required: false
          description: Equality filter for "monthlyBudgets"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreference]
          required: false
          description: Equality filter for "anomalyPreference"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-monthlyBudgets-put
      description: Update "monthlyBudgets" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-monthlyBudgets-patch
      description: Update "monthlyBudgets" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-User-relationship-monthlyBudgets
      description: Create new "monthlyBudgets" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/anomalyPreference:
    get:
      operationId: fetch-User-related-anomalyPreference
      description: Fetch the related "anomalyPreference" resource for "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/user/{id}/relationships/anomalyPreference:
    get:
      operationId: fetch-User-relationship-anomalyPreference
      description: Fetch the "anomalyPreference" relationships for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-User-relationship-anomalyPreference-put
      description: Update "anomalyPreference" relationship for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-User-relationship-anomalyPreference-patch
      description: Update "anomalyPreference" relationship for a "User"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction:
    get:
      operationId: list-Transaction
      description: List "Transaction" resources
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[type]
          required: false
          description: Equality filter for "type"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/TransactionType"
        - name: filter[source]
          required: false
          description: Equality filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$contains]
          required: false
          description: String contains filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$icontains]
          required: false
          description: String case-insensitive contains filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$search]
          required: false
          description: String full-text search filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$startsWith]
          required: false
          description: String startsWith filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$endsWith]
          required: false
          description: String endsWith filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[category]
          required: false
          description: Equality filter for "category"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[income]
          required: false
          description: Equality filter for "income"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[expenseType]
          required: false
          description: Equality filter for "expenseType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/ExpenseType"
        - name: filter[expense]
          required: false
          description: Equality filter for "expense"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[subscription]
          required: false
          description: Equality filter for "subscription"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[debt]
          required: false
          description: Equality filter for "debt"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Transaction
      description: Create a "Transaction" resource
      tags:
        - transaction
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/TransactionCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}:
    get:
      operationId: fetch-Transaction
      description: Fetch a "Transaction" resource
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-put
      description: Update a "Transaction" resource
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/TransactionUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-patch
      description: Update a "Transaction" resource
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/TransactionUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Transaction
      description: Delete a "Transaction" resource
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/user:
    get:
      operationId: fetch-Transaction-related-user
      description: Fetch the related "user" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/transaction/{id}/relationships/user:
    get:
      operationId: fetch-Transaction-relationship-user
      description: Fetch the "user" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-user-put
      description: Update "user" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-user-patch
      description: Update "user" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/category:
    get:
      operationId: fetch-Transaction-related-category
      description: Fetch the related "category" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/transaction/{id}/relationships/category:
    get:
      operationId: fetch-Transaction-relationship-category
      description: Fetch the "category" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-category-put
      description: Update "category" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-category-patch
      description: Update "category" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/income:
    get:
      operationId: fetch-Transaction-related-income
      description: Fetch the related "income" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/relationships/income:
    get:
      operationId: fetch-Transaction-relationship-income
      description: Fetch the "income" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-income-put
      description: Update "income" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-income-patch
      description: Update "income" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/expense:
    get:
      operationId: fetch-Transaction-related-expense
      description: Fetch the related "expense" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/relationships/expense:
    get:
      operationId: fetch-Transaction-relationship-expense
      description: Fetch the "expense" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-expense-put
      description: Update "expense" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-expense-patch
      description: Update "expense" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/subscription:
    get:
      operationId: fetch-Transaction-related-subscription
      description: Fetch the related "subscription" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/relationships/subscription:
    get:
      operationId: fetch-Transaction-relationship-subscription
      description: Fetch the "subscription" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-subscription-put
      description: Update "subscription" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-subscription-patch
      description: Update "subscription" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/debt:
    get:
      operationId: fetch-Transaction-related-debt
      description: Fetch the related "debt" resource for "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/transaction/{id}/relationships/debt:
    get:
      operationId: fetch-Transaction-relationship-debt
      description: Fetch the "debt" relationships for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Transaction-relationship-debt-put
      description: Update "debt" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Transaction-relationship-debt-patch
      description: Update "debt" relationship for a "Transaction"
      tags:
        - transaction
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/income:
    get:
      operationId: list-Income
      description: List "Income" resources
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[source]
          required: false
          description: Equality filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$contains]
          required: false
          description: String contains filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$icontains]
          required: false
          description: String case-insensitive contains filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$search]
          required: false
          description: String full-text search filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$startsWith]
          required: false
          description: String startsWith filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[source$endsWith]
          required: false
          description: String endsWith filter for "source"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[transaction]
          required: false
          description: Equality filter for "transaction"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Income
      description: Create a "Income" resource
      tags:
        - income
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/IncomeCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/income/{id}:
    get:
      operationId: fetch-Income
      description: Fetch a "Income" resource
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Income-put
      description: Update a "Income" resource
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/IncomeUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Income-patch
      description: Update a "Income" resource
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/IncomeUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Income
      description: Delete a "Income" resource
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/income/{id}/user:
    get:
      operationId: fetch-Income-related-user
      description: Fetch the related "user" resource for "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/income/{id}/relationships/user:
    get:
      operationId: fetch-Income-relationship-user
      description: Fetch the "user" relationships for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Income-relationship-user-put
      description: Update "user" relationship for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Income-relationship-user-patch
      description: Update "user" relationship for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/income/{id}/transaction:
    get:
      operationId: fetch-Income-related-transaction
      description: Fetch the related "transaction" resource for "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/income/{id}/relationships/transaction:
    get:
      operationId: fetch-Income-relationship-transaction
      description: Fetch the "transaction" relationships for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Income-relationship-transaction-put
      description: Update "transaction" relationship for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Income-relationship-transaction-patch
      description: Update "transaction" relationship for a "Income"
      tags:
        - income
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense:
    get:
      operationId: list-Expense
      description: List "Expense" resources
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[expenseType]
          required: false
          description: Equality filter for "expenseType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/ExpenseType"
        - name: filter[category]
          required: false
          description: Equality filter for "category"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[transaction]
          required: false
          description: Equality filter for "transaction"
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Expense
      description: Create a "Expense" resource
      tags:
        - expense
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ExpenseCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense/{id}:
    get:
      operationId: fetch-Expense
      description: Fetch a "Expense" resource
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Expense-put
      description: Update a "Expense" resource
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ExpenseUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Expense-patch
      description: Update a "Expense" resource
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/ExpenseUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Expense
      description: Delete a "Expense" resource
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense/{id}/user:
    get:
      operationId: fetch-Expense-related-user
      description: Fetch the related "user" resource for "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/expense/{id}/relationships/user:
    get:
      operationId: fetch-Expense-relationship-user
      description: Fetch the "user" relationships for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Expense-relationship-user-put
      description: Update "user" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Expense-relationship-user-patch
      description: Update "user" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense/{id}/category:
    get:
      operationId: fetch-Expense-related-category
      description: Fetch the related "category" resource for "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/expense/{id}/relationships/category:
    get:
      operationId: fetch-Expense-relationship-category
      description: Fetch the "category" relationships for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Expense-relationship-category-put
      description: Update "category" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Expense-relationship-category-patch
      description: Update "category" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense/{id}/transaction:
    get:
      operationId: fetch-Expense-related-transaction
      description: Fetch the related "transaction" resource for "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/expense/{id}/relationships/transaction:
    get:
      operationId: fetch-Expense-relationship-transaction
      description: Fetch the "transaction" relationships for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Expense-relationship-transaction-put
      description: Update "transaction" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Expense-relationship-transaction-patch
      description: Update "transaction" relationship for a "Expense"
      tags:
        - expense
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category:
    get:
      operationId: list-Category
      description: List "Category" resources
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    post:
      operationId: create-Category
      description: Create a "Category" resource
      tags:
        - category
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/CategoryCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}:
    get:
      operationId: fetch-Category
      description: Fetch a "Category" resource
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-Category-put
      description: Update a "Category" resource
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/CategoryUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Category-patch
      description: Update a "Category" resource
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/CategoryUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Category
      description: Delete a "Category" resource
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/expenses:
    get:
      operationId: fetch-Category-related-expenses
      description: Fetch the related "expenses" resource for "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/ExpenseListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/relationships/expenses:
    get:
      operationId: fetch-Category-relationship-expenses
      description: Fetch the "expenses" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-Category-relationship-expenses-put
      description: Update "expenses" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Category-relationship-expenses-patch
      description: Update "expenses" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Category-relationship-expenses
      description: Create new "expenses" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/subscriptions:
    get:
      operationId: fetch-Category-related-subscriptions
      description: Fetch the related "subscriptions" resource for "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/relationships/subscriptions:
    get:
      operationId: fetch-Category-relationship-subscriptions
      description: Fetch the "subscriptions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-Category-relationship-subscriptions-put
      description: Update "subscriptions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Category-relationship-subscriptions-patch
      description: Update "subscriptions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Category-relationship-subscriptions
      description: Create new "subscriptions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/transactions:
    get:
      operationId: fetch-Category-related-transactions
      description: Fetch the related "transactions" resource for "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/relationships/transactions:
    get:
      operationId: fetch-Category-relationship-transactions
      description: Fetch the "transactions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-Category-relationship-transactions-put
      description: Update "transactions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Category-relationship-transactions-patch
      description: Update "transactions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Category-relationship-transactions
      description: Create new "transactions" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/anomalyPreferences:
    get:
      operationId: fetch-Category-related-anomalyPreferences
      description: Fetch the related "anomalyPreferences" resource for "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/category/{id}/relationships/anomalyPreferences:
    get:
      operationId: fetch-Category-relationship-anomalyPreferences
      description: Fetch the "anomalyPreferences" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name]
          required: false
          description: Equality filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$contains]
          required: false
          description: String contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$icontains]
          required: false
          description: String case-insensitive contains filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$search]
          required: false
          description: String full-text search filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$startsWith]
          required: false
          description: String startsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[name$endsWith]
          required: false
          description: String endsWith filter for "name"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[budgetType]
          required: false
          description: Equality filter for "budgetType"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetType"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[expenses]
          required: false
          description: Equality filter for "expenses"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[subscriptions]
          required: false
          description: Equality filter for "subscriptions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[anomalyPreferences]
          required: false
          description: Equality filter for "anomalyPreferences"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
    put:
      operationId: update-Category-relationship-anomalyPreferences-put
      description: Update "anomalyPreferences" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Category-relationship-anomalyPreferences-patch
      description: Update "anomalyPreferences" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Category-relationship-anomalyPreferences
      description: Create new "anomalyPreferences" relationships for a "Category"
      tags:
        - category
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription:
    get:
      operationId: list-Subscription
      description: List "Subscription" resources
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/SubscriptionStatus"
        - name: filter[category]
          required: false
          description: Equality filter for "category"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Subscription
      description: Create a "Subscription" resource
      tags:
        - subscription
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/SubscriptionCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription/{id}:
    get:
      operationId: fetch-Subscription
      description: Fetch a "Subscription" resource
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Subscription-put
      description: Update a "Subscription" resource
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/SubscriptionUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Subscription-patch
      description: Update a "Subscription" resource
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/SubscriptionUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Subscription
      description: Delete a "Subscription" resource
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription/{id}/user:
    get:
      operationId: fetch-Subscription-related-user
      description: Fetch the related "user" resource for "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/subscription/{id}/relationships/user:
    get:
      operationId: fetch-Subscription-relationship-user
      description: Fetch the "user" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Subscription-relationship-user-put
      description: Update "user" relationship for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Subscription-relationship-user-patch
      description: Update "user" relationship for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription/{id}/category:
    get:
      operationId: fetch-Subscription-related-category
      description: Fetch the related "category" resource for "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/subscription/{id}/relationships/category:
    get:
      operationId: fetch-Subscription-relationship-category
      description: Fetch the "category" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Subscription-relationship-category-put
      description: Update "category" relationship for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Subscription-relationship-category-patch
      description: Update "category" relationship for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription/{id}/transactions:
    get:
      operationId: fetch-Subscription-related-transactions
      description: Fetch the related "transactions" resource for "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/SubscriptionStatus"
        - name: filter[category]
          required: false
          description: Equality filter for "category"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/subscription/{id}/relationships/transactions:
    get:
      operationId: fetch-Subscription-relationship-transactions
      description: Fetch the "transactions" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[amount]
          required: false
          description: Equality filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lt]
          required: false
          description: Less-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$lte]
          required: false
          description: Less-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gt]
          required: false
          description: Greater-than filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[amount$gte]
          required: false
          description: Greater-than or equal filter for "amount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/SubscriptionStatus"
        - name: filter[category]
          required: false
          description: Equality filter for "category"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note]
          required: false
          description: Equality filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$contains]
          required: false
          description: String contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$icontains]
          required: false
          description: String case-insensitive contains filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$search]
          required: false
          description: String full-text search filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$startsWith]
          required: false
          description: String startsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[note$endsWith]
          required: false
          description: String endsWith filter for "note"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Subscription-relationship-transactions-put
      description: Update "transactions" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Subscription-relationship-transactions-patch
      description: Update "transactions" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Subscription-relationship-transactions
      description: Create new "transactions" relationships for a "Subscription"
      tags:
        - subscription
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/debt:
    get:
      operationId: list-Debt
      description: List "Debt" resources
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[totalAmount]
          required: false
          description: Equality filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lt]
          required: false
          description: Less-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lte]
          required: false
          description: Less-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gt]
          required: false
          description: Greater-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gte]
          required: false
          description: Greater-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount]
          required: false
          description: Equality filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lt]
          required: false
          description: Less-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lte]
          required: false
          description: Less-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gt]
          required: false
          description: Greater-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gte]
          required: false
          description: Greater-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate]
          required: false
          description: Equality filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lt]
          required: false
          description: Less-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lte]
          required: false
          description: Less-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gt]
          required: false
          description: Greater-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gte]
          required: false
          description: Greater-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment]
          required: false
          description: Equality filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lt]
          required: false
          description: Less-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lte]
          required: false
          description: Less-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gt]
          required: false
          description: Greater-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gte]
          required: false
          description: Greater-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/DebtStatus"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Debt
      description: Create a "Debt" resource
      tags:
        - debt
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/DebtCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/debt/{id}:
    get:
      operationId: fetch-Debt
      description: Fetch a "Debt" resource
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Debt-put
      description: Update a "Debt" resource
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/DebtUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Debt-patch
      description: Update a "Debt" resource
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/DebtUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/DebtResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-Debt
      description: Delete a "Debt" resource
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/debt/{id}/user:
    get:
      operationId: fetch-Debt-related-user
      description: Fetch the related "user" resource for "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/debt/{id}/relationships/user:
    get:
      operationId: fetch-Debt-relationship-user
      description: Fetch the "user" relationships for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Debt-relationship-user-put
      description: Update "user" relationship for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Debt-relationship-user-patch
      description: Update "user" relationship for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/debt/{id}/transactions:
    get:
      operationId: fetch-Debt-related-transactions
      description: Fetch the related "transactions" resource for "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[totalAmount]
          required: false
          description: Equality filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lt]
          required: false
          description: Less-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lte]
          required: false
          description: Less-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gt]
          required: false
          description: Greater-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gte]
          required: false
          description: Greater-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount]
          required: false
          description: Equality filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lt]
          required: false
          description: Less-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lte]
          required: false
          description: Less-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gt]
          required: false
          description: Greater-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gte]
          required: false
          description: Greater-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate]
          required: false
          description: Equality filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lt]
          required: false
          description: Less-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lte]
          required: false
          description: Less-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gt]
          required: false
          description: Greater-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gte]
          required: false
          description: Greater-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment]
          required: false
          description: Equality filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lt]
          required: false
          description: Less-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lte]
          required: false
          description: Less-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gt]
          required: false
          description: Greater-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gte]
          required: false
          description: Greater-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/DebtStatus"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/debt/{id}/relationships/transactions:
    get:
      operationId: fetch-Debt-relationship-transactions
      description: Fetch the "transactions" relationships for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[totalAmount]
          required: false
          description: Equality filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lt]
          required: false
          description: Less-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$lte]
          required: false
          description: Less-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gt]
          required: false
          description: Greater-than filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalAmount$gte]
          required: false
          description: Greater-than or equal filter for "totalAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount]
          required: false
          description: Equality filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lt]
          required: false
          description: Less-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$lte]
          required: false
          description: Less-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gt]
          required: false
          description: Greater-than filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[paidAmount$gte]
          required: false
          description: Greater-than or equal filter for "paidAmount"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate]
          required: false
          description: Equality filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lt]
          required: false
          description: Less-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$lte]
          required: false
          description: Less-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gt]
          required: false
          description: Greater-than filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[interestRate$gte]
          required: false
          description: Greater-than or equal filter for "interestRate"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment]
          required: false
          description: Equality filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lt]
          required: false
          description: Less-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$lte]
          required: false
          description: Less-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gt]
          required: false
          description: Greater-than filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[monthlyPayment$gte]
          required: false
          description: Greater-than or equal filter for "monthlyPayment"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[status]
          required: false
          description: Equality filter for "status"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/DebtStatus"
        - name: filter[description]
          required: false
          description: Equality filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$contains]
          required: false
          description: String contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$icontains]
          required: false
          description: String case-insensitive contains filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$search]
          required: false
          description: String full-text search filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$startsWith]
          required: false
          description: String startsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[description$endsWith]
          required: false
          description: String endsWith filter for "description"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date]
          required: false
          description: Equality filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lt]
          required: false
          description: Less-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$lte]
          required: false
          description: Less-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gt]
          required: false
          description: Greater-than filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[date$gte]
          required: false
          description: Greater-than or equal filter for "date"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate]
          required: false
          description: Equality filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lt]
          required: false
          description: Less-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$lte]
          required: false
          description: Less-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gt]
          required: false
          description: Greater-than filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[dueDate$gte]
          required: false
          description: Greater-than or equal filter for "dueDate"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[transactions]
          required: false
          description: Equality filter for "transactions"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-Debt-relationship-transactions-put
      description: Update "transactions" relationships for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-Debt-relationship-transactions-patch
      description: Update "transactions" relationships for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-Debt-relationship-transactions
      description: Create new "transactions" relationships for a "Debt"
      tags:
        - debt
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/userBudgetPreference:
    get:
      operationId: list-UserBudgetPreference
      description: List "UserBudgetPreference" resources
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[strategy]
          required: false
          description: Equality filter for "strategy"
          in: query
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/BudgetAllocationStrategy"
        - name: filter[needsPercentage]
          required: false
          description: Equality filter for "needsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsPercentage$lt]
          required: false
          description: Less-than filter for "needsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsPercentage$lte]
          required: false
          description: Less-than or equal filter for "needsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsPercentage$gt]
          required: false
          description: Greater-than filter for "needsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsPercentage$gte]
          required: false
          description: Greater-than or equal filter for "needsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsPercentage]
          required: false
          description: Equality filter for "wantsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsPercentage$lt]
          required: false
          description: Less-than filter for "wantsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsPercentage$lte]
          required: false
          description: Less-than or equal filter for "wantsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsPercentage$gt]
          required: false
          description: Greater-than filter for "wantsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsPercentage$gte]
          required: false
          description: Greater-than or equal filter for "wantsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsPercentage]
          required: false
          description: Equality filter for "savingsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsPercentage$lt]
          required: false
          description: Less-than filter for "savingsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsPercentage$lte]
          required: false
          description: Less-than or equal filter for "savingsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsPercentage$gt]
          required: false
          description: Greater-than filter for "savingsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsPercentage$gte]
          required: false
          description: Greater-than or equal filter for "savingsPercentage"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-UserBudgetPreference
      description: Create a "UserBudgetPreference" resource
      tags:
        - userBudgetPreference
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserBudgetPreferenceCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/userBudgetPreference/{id}:
    get:
      operationId: fetch-UserBudgetPreference
      description: Fetch a "UserBudgetPreference" resource
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-UserBudgetPreference-put
      description: Update a "UserBudgetPreference" resource
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserBudgetPreferenceUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-UserBudgetPreference-patch
      description: Update a "UserBudgetPreference" resource
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/UserBudgetPreferenceUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserBudgetPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-UserBudgetPreference
      description: Delete a "UserBudgetPreference" resource
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/userBudgetPreference/{id}/user:
    get:
      operationId: fetch-UserBudgetPreference-related-user
      description: Fetch the related "user" resource for "UserBudgetPreference"
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/userBudgetPreference/{id}/relationships/user:
    get:
      operationId: fetch-UserBudgetPreference-relationship-user
      description: Fetch the "user" relationships for a "UserBudgetPreference"
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-UserBudgetPreference-relationship-user-put
      description: Update "user" relationship for a "UserBudgetPreference"
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-UserBudgetPreference-relationship-user-patch
      description: Update "user" relationship for a "UserBudgetPreference"
      tags:
        - userBudgetPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/monthlyIncomeBudget:
    get:
      operationId: list-MonthlyIncomeBudget
      description: List "MonthlyIncomeBudget" resources
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[monthYear]
          required: false
          description: Equality filter for "monthYear"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[monthYear$lt]
          required: false
          description: Less-than filter for "monthYear"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[monthYear$lte]
          required: false
          description: Less-than or equal filter for "monthYear"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[monthYear$gt]
          required: false
          description: Greater-than filter for "monthYear"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[monthYear$gte]
          required: false
          description: Greater-than or equal filter for "monthYear"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[totalIncome]
          required: false
          description: Equality filter for "totalIncome"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalIncome$lt]
          required: false
          description: Less-than filter for "totalIncome"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalIncome$lte]
          required: false
          description: Less-than or equal filter for "totalIncome"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalIncome$gt]
          required: false
          description: Greater-than filter for "totalIncome"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[totalIncome$gte]
          required: false
          description: Greater-than or equal filter for "totalIncome"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsBudget]
          required: false
          description: Equality filter for "needsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsBudget$lt]
          required: false
          description: Less-than filter for "needsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsBudget$lte]
          required: false
          description: Less-than or equal filter for "needsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsBudget$gt]
          required: false
          description: Greater-than filter for "needsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[needsBudget$gte]
          required: false
          description: Greater-than or equal filter for "needsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsBudget]
          required: false
          description: Equality filter for "wantsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsBudget$lt]
          required: false
          description: Less-than filter for "wantsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsBudget$lte]
          required: false
          description: Less-than or equal filter for "wantsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsBudget$gt]
          required: false
          description: Greater-than filter for "wantsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[wantsBudget$gte]
          required: false
          description: Greater-than or equal filter for "wantsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsBudget]
          required: false
          description: Equality filter for "savingsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsBudget$lt]
          required: false
          description: Less-than filter for "savingsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsBudget$lte]
          required: false
          description: Less-than or equal filter for "savingsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsBudget$gt]
          required: false
          description: Greater-than filter for "savingsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[savingsBudget$gte]
          required: false
          description: Greater-than or equal filter for "savingsBudget"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-MonthlyIncomeBudget
      description: Create a "MonthlyIncomeBudget" resource
      tags:
        - monthlyIncomeBudget
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/MonthlyIncomeBudgetCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/monthlyIncomeBudget/{id}:
    get:
      operationId: fetch-MonthlyIncomeBudget
      description: Fetch a "MonthlyIncomeBudget" resource
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-MonthlyIncomeBudget-put
      description: Update a "MonthlyIncomeBudget" resource
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/MonthlyIncomeBudgetUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-MonthlyIncomeBudget-patch
      description: Update a "MonthlyIncomeBudget" resource
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/MonthlyIncomeBudgetUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/MonthlyIncomeBudgetResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-MonthlyIncomeBudget
      description: Delete a "MonthlyIncomeBudget" resource
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/monthlyIncomeBudget/{id}/user:
    get:
      operationId: fetch-MonthlyIncomeBudget-related-user
      description: Fetch the related "user" resource for "MonthlyIncomeBudget"
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/monthlyIncomeBudget/{id}/relationships/user:
    get:
      operationId: fetch-MonthlyIncomeBudget-relationship-user
      description: Fetch the "user" relationships for a "MonthlyIncomeBudget"
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-MonthlyIncomeBudget-relationship-user-put
      description: Update "user" relationship for a "MonthlyIncomeBudget"
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-MonthlyIncomeBudget-relationship-user-patch
      description: Update "user" relationship for a "MonthlyIncomeBudget"
      tags:
        - monthlyIncomeBudget
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/anomalyPreference:
    get:
      operationId: list-AnomalyPreference
      description: List "AnomalyPreference" resources
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[threshold]
          required: false
          description: Equality filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lt]
          required: false
          description: Less-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lte]
          required: false
          description: Less-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gt]
          required: false
          description: Greater-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gte]
          required: false
          description: Greater-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[emailNotifications]
          required: false
          description: Equality filter for "emailNotifications"
          in: query
          style: form
          explode: false
          schema:
            type: boolean
        - name: filter[monitoredCategories]
          required: false
          description: Equality filter for "monitoredCategories"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-AnomalyPreference
      description: Create a "AnomalyPreference" resource
      tags:
        - anomalyPreference
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/AnomalyPreferenceCreateRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/anomalyPreference/{id}:
    get:
      operationId: fetch-AnomalyPreference
      description: Fetch a "AnomalyPreference" resource
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-AnomalyPreference-put
      description: Update a "AnomalyPreference" resource
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/AnomalyPreferenceUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-AnomalyPreference-patch
      description: Update a "AnomalyPreference" resource
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/AnomalyPreferenceUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AnomalyPreferenceResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "422":
          description: Request is unprocessable due to validation errors
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    delete:
      operationId: delete-AnomalyPreference
      description: Delete a "AnomalyPreference" resource
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/anomalyPreference/{id}/user:
    get:
      operationId: fetch-AnomalyPreference-related-user
      description: Fetch the related "user" resource for "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/anomalyPreference/{id}/relationships/user:
    get:
      operationId: fetch-AnomalyPreference-relationship-user
      description: Fetch the "user" relationships for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-AnomalyPreference-relationship-user-put
      description: Update "user" relationship for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-AnomalyPreference-relationship-user-patch
      description: Update "user" relationship for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toOneRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toOneRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
  /api/anomalyPreference/{id}/monitoredCategories:
    get:
      operationId: fetch-AnomalyPreference-related-monitoredCategories
      description: Fetch the related "monitoredCategories" resource for "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/include"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[threshold]
          required: false
          description: Equality filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lt]
          required: false
          description: Less-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lte]
          required: false
          description: Less-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gt]
          required: false
          description: Greater-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gte]
          required: false
          description: Greater-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[emailNotifications]
          required: false
          description: Equality filter for "emailNotifications"
          in: query
          style: form
          explode: false
          schema:
            type: boolean
        - name: filter[monitoredCategories]
          required: false
          description: Equality filter for "monitoredCategories"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/CategoryListResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
      security: []
  /api/anomalyPreference/{id}/relationships/monitoredCategories:
    get:
      operationId: fetch-AnomalyPreference-relationship-monitoredCategories
      description: Fetch the "monitoredCategories" relationships for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/page-offset"
        - $ref: "#/components/parameters/page-limit"
        - name: filter[id]
          required: false
          description: Id filter
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[user]
          required: false
          description: Equality filter for "user"
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: filter[threshold]
          required: false
          description: Equality filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lt]
          required: false
          description: Less-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$lte]
          required: false
          description: Less-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gt]
          required: false
          description: Greater-than filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[threshold$gte]
          required: false
          description: Greater-than or equal filter for "threshold"
          in: query
          style: form
          explode: false
          schema:
            type: number
        - name: filter[emailNotifications]
          required: false
          description: Equality filter for "emailNotifications"
          in: query
          style: form
          explode: false
          schema:
            type: boolean
        - name: filter[monitoredCategories]
          required: false
          description: Equality filter for "monitoredCategories"
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter[createdAt]
          required: false
          description: Equality filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lt]
          required: false
          description: Less-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$lte]
          required: false
          description: Less-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gt]
          required: false
          description: Greater-than filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[createdAt$gte]
          required: false
          description: Greater-than or equal filter for "createdAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt]
          required: false
          description: Equality filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lt]
          required: false
          description: Less-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$lte]
          required: false
          description: Less-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gt]
          required: false
          description: Greater-than filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
        - name: filter[updatedAt$gte]
          required: false
          description: Greater-than or equal filter for "updatedAt"
          in: query
          style: form
          explode: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    put:
      operationId: update-AnomalyPreference-relationship-monitoredCategories-put
      description: Update "monitoredCategories" relationships for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    patch:
      operationId: update-AnomalyPreference-relationship-monitoredCategories-patch
      description: Update "monitoredCategories" relationships for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
    post:
      operationId: create-AnomalyPreference-relationship-monitoredCategories
      description: Create new "monitoredCategories" relationships for a "AnomalyPreference"
      tags:
        - anomalyPreference
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/_toManyRelationshipRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_toManyRelationshipResponse"
        "403":
          description: Request is forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
        "404":
          description: Resource is not found
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/_errorResponse"
components:
  schemas:
    _jsonapi:
      type: object
      description: An object describing the server’s implementation
      required:
        - version
      properties:
        version:
          type: string
    _meta:
      type: object
      description: Meta information about the request or response
      properties:
        serialization:
          description: Superjson serialization metadata
      additionalProperties: true
    _resourceIdentifier:
      type: object
      description: Identifier for a resource
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: Resource type
        id:
          type: string
          description: Resource id
    _resource:
      allOf:
        - $ref: "#/components/schemas/_resourceIdentifier"
        - type: object
          description: A resource with attributes and relationships
          properties:
            attributes:
              type: object
              description: Resource attributes
            relationships:
              type: object
              description: Resource relationships
    _links:
      type: object
      required:
        - self
      description: Links related to the resource
      properties:
        self:
          type: string
          description: Link for refetching the curent results
    _pagination:
      type: object
      description: Pagination information
      required:
        - first
        - last
        - prev
        - next
      properties:
        first:
          oneOf:
            - type: "null"
            - type: string
              description: Link to the first page
        last:
          oneOf:
            - type: "null"
            - type: string
              description: Link to the last page
        prev:
          oneOf:
            - type: "null"
            - type: string
              description: Link to the previous page
        next:
          oneOf:
            - type: "null"
            - type: string
              description: Link to the next page
    _errors:
      type: array
      description: An array of error objects
      items:
        type: object
        required:
          - status
          - code
        properties:
          status:
            type: string
            description: HTTP status
          code:
            type: string
            description: Error code
          prismaCode:
            type: string
            description: Prisma error code if the error is thrown by Prisma
          title:
            type: string
            description: Error title
          detail:
            type: string
            description: Error detail
          reason:
            type: string
            description: Detailed error reason
          zodErrors:
            type: object
            additionalProperties: true
            description: Zod validation errors if the error is due to data validation
              failure
    _errorResponse:
      type: object
      required:
        - errors
      description: An error response
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        errors:
          $ref: "#/components/schemas/_errors"
    _relationLinks:
      type: object
      required:
        - self
        - related
      description: Links related to a relationship
      properties:
        self:
          type: string
          description: Link for fetching this relationship
        related:
          type: string
          description: Link for fetching the resource represented by this relationship
    _toOneRelationship:
      type: object
      description: A to-one relationship
      properties:
        data:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/_resourceIdentifier"
    _toOneRelationshipWithLinks:
      type: object
      required:
        - links
        - data
      description: A to-one relationship with links
      properties:
        links:
          $ref: "#/components/schemas/_relationLinks"
        data:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/_resourceIdentifier"
    _toManyRelationship:
      type: object
      required:
        - data
      description: A to-many relationship
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/_resourceIdentifier"
    _toManyRelationshipWithLinks:
      type: object
      required:
        - links
        - data
      description: A to-many relationship with links
      properties:
        links:
          $ref: "#/components/schemas/_pagedRelationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/_resourceIdentifier"
    _pagedRelationLinks:
      description: Relationship links with pagination information
      allOf:
        - $ref: "#/components/schemas/_pagination"
        - $ref: "#/components/schemas/_relationLinks"
    _toManyRelationshipRequest:
      type: object
      required:
        - data
      description: Input for manipulating a to-many relationship
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/_resourceIdentifier"
    _toOneRelationshipRequest:
      description: Input for manipulating a to-one relationship
      oneOf:
        - type: "null"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/_resourceIdentifier"
    _toManyRelationshipResponse:
      description: Response for a to-many relationship
      allOf:
        - $ref: "#/components/schemas/_toManyRelationshipWithLinks"
        - type: object
          properties:
            jsonapi:
              $ref: "#/components/schemas/_jsonapi"
    _toOneRelationshipResponse:
      description: Response for a to-one relationship
      allOf:
        - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
        - type: object
          properties:
            jsonapi:
              $ref: "#/components/schemas/_jsonapi"
    BudgetType:
      type: string
      description: The "BudgetType" Enum
      enum:
        - NEEDS
        - WANTS
        - SAVINGS
    Role:
      type: string
      description: The "Role" Enum
      enum:
        - USER
        - ADMIN
    TransactionType:
      type: string
      description: The "TransactionType" Enum
      enum:
        - INCOME
        - EXPENSE
    ExpenseType:
      type: string
      description: The "ExpenseType" Enum
      enum:
        - REGULAR
        - SUBSCRIPTION
        - DEBT_PAYMENT
    SubscriptionStatus:
      type: string
      description: The "SubscriptionStatus" Enum
      enum:
        - ACTIVE
        - CANCELED
        - PAUSED
    DebtStatus:
      type: string
      description: The "DebtStatus" Enum
      enum:
        - ACTIVE
        - PAID
    BudgetAllocationStrategy:
      type: string
      description: The "BudgetAllocationStrategy" Enum
      enum:
        - FIFTY_THIRTY_TWENTY
        - CUSTOM
    User:
      type: object
      description: The "User" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
            username:
              type: string
            accountType:
              $ref: "#/components/schemas/Role"
            createdAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            incomes:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            expenses:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            subscriptions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            debts:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            transactions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            budgetPreference:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            monthlyBudgets:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            anomalyPreference:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    UserCreateRequest:
      type: object
      description: Input for creating a "User"
      required:
        - data
      properties:
        data:
          type: object
          description: The "User" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                accountType:
                  $ref: "#/components/schemas/Role"
                createdAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                incomes:
                  $ref: "#/components/schemas/_toManyRelationship"
                expenses:
                  $ref: "#/components/schemas/_toManyRelationship"
                subscriptions:
                  $ref: "#/components/schemas/_toManyRelationship"
                debts:
                  $ref: "#/components/schemas/_toManyRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
                budgetPreference:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                monthlyBudgets:
                  $ref: "#/components/schemas/_toManyRelationship"
                anomalyPreference:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    UserUpdateRequest:
      type: object
      description: Input for updating a "User"
      required:
        - data
      properties:
        data:
          type: object
          description: The "User" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                accountType:
                  $ref: "#/components/schemas/Role"
                createdAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                incomes:
                  $ref: "#/components/schemas/_toManyRelationship"
                expenses:
                  $ref: "#/components/schemas/_toManyRelationship"
                subscriptions:
                  $ref: "#/components/schemas/_toManyRelationship"
                debts:
                  $ref: "#/components/schemas/_toManyRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
                budgetPreference:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                monthlyBudgets:
                  $ref: "#/components/schemas/_toManyRelationship"
                anomalyPreference:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    UserResponse:
      type: object
      description: Response for a "User"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/User"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a1
                    incomes:
                      $ref: "#/components/schemas/_toManyRelationship"
                    expenses:
                      $ref: "#/components/schemas/_toManyRelationship"
                    subscriptions:
                      $ref: "#/components/schemas/_toManyRelationship"
                    debts:
                      $ref: "#/components/schemas/_toManyRelationship"
                    transactions:
                      $ref: "#/components/schemas/_toManyRelationship"
                    budgetPreference:
                      $ref: "#/components/schemas/_toOneRelationship"
                    monthlyBudgets:
                      $ref: "#/components/schemas/_toManyRelationship"
                    anomalyPreference:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    UserListResponse:
      type: object
      description: Response for a list of "User"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a1
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Transaction:
      type: object
      description: The "Transaction" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            amount:
              type: number
            type:
              $ref: "#/components/schemas/TransactionType"
            source:
              oneOf:
                - type: "null"
                - type: string
            categoryId:
              oneOf:
                - type: "null"
                - type: string
            note:
              oneOf:
                - type: "null"
                - type: string
            createdAt:
              type: string
              format: date-time
            date:
              type: string
              format: date-time
            incomeId:
              oneOf:
                - type: "null"
                - type: string
            expenseType:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/ExpenseType"
            expenseId:
              oneOf:
                - type: "null"
                - type: string
            subscriptionId:
              oneOf:
                - type: "null"
                - type: string
            debtId:
              oneOf:
                - type: "null"
                - type: string
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            category:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            income:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            expense:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            subscription:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            debt:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    TransactionCreateRequest:
      type: object
      description: Input for creating a "Transaction"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Transaction" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - amount
                - type
              properties:
                userId:
                  type: string
                amount:
                  type: number
                type:
                  $ref: "#/components/schemas/TransactionType"
                source:
                  oneOf:
                    - type: "null"
                    - type: string
                categoryId:
                  oneOf:
                    - type: "null"
                    - type: string
                note:
                  oneOf:
                    - type: "null"
                    - type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                incomeId:
                  oneOf:
                    - type: "null"
                    - type: string
                expenseType:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/ExpenseType"
                expenseId:
                  oneOf:
                    - type: "null"
                    - type: string
                subscriptionId:
                  oneOf:
                    - type: "null"
                    - type: string
                debtId:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                income:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                expense:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                subscription:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                debt:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    TransactionUpdateRequest:
      type: object
      description: Input for updating a "Transaction"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Transaction" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                amount:
                  type: number
                type:
                  $ref: "#/components/schemas/TransactionType"
                source:
                  oneOf:
                    - type: "null"
                    - type: string
                categoryId:
                  oneOf:
                    - type: "null"
                    - type: string
                note:
                  oneOf:
                    - type: "null"
                    - type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                incomeId:
                  oneOf:
                    - type: "null"
                    - type: string
                expenseType:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/ExpenseType"
                expenseId:
                  oneOf:
                    - type: "null"
                    - type: string
                subscriptionId:
                  oneOf:
                    - type: "null"
                    - type: string
                debtId:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                income:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                expense:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                subscription:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
                debt:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    TransactionResponse:
      type: object
      description: Response for a "Transaction"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Transaction"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a2
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    category:
                      $ref: "#/components/schemas/_toOneRelationship"
                    income:
                      $ref: "#/components/schemas/_toOneRelationship"
                    expense:
                      $ref: "#/components/schemas/_toOneRelationship"
                    subscription:
                      $ref: "#/components/schemas/_toOneRelationship"
                    debt:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    TransactionListResponse:
      type: object
      description: Response for a list of "Transaction"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Transaction"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a2
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Income:
      type: object
      description: The "Income" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            amount:
              type: number
            source:
              type: string
            createdAt:
              type: string
              format: date-time
            date:
              type: string
              format: date-time
            note:
              oneOf:
                - type: "null"
                - type: string
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            transaction:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    IncomeCreateRequest:
      type: object
      description: Input for creating a "Income"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Income" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - amount
                - source
              properties:
                userId:
                  type: string
                amount:
                  type: number
                source:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                transaction:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    IncomeUpdateRequest:
      type: object
      description: Input for updating a "Income"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Income" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                amount:
                  type: number
                source:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                transaction:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    IncomeResponse:
      type: object
      description: Response for a "Income"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Income"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a3
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    transaction:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    IncomeListResponse:
      type: object
      description: Response for a list of "Income"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Income"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a3
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Expense:
      type: object
      description: The "Expense" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            amount:
              type: number
            expenseType:
              $ref: "#/components/schemas/ExpenseType"
            categoryId:
              type: string
            createdAt:
              type: string
              format: date-time
            date:
              type: string
              format: date-time
            note:
              oneOf:
                - type: "null"
                - type: string
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            category:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            transaction:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    ExpenseCreateRequest:
      type: object
      description: Input for creating a "Expense"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Expense" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - amount
                - categoryId
              properties:
                userId:
                  type: string
                amount:
                  type: number
                expenseType:
                  $ref: "#/components/schemas/ExpenseType"
                categoryId:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  $ref: "#/components/schemas/_toOneRelationship"
                transaction:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    ExpenseUpdateRequest:
      type: object
      description: Input for updating a "Expense"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Expense" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                amount:
                  type: number
                expenseType:
                  $ref: "#/components/schemas/ExpenseType"
                categoryId:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  $ref: "#/components/schemas/_toOneRelationship"
                transaction:
                  oneOf:
                    - type: "null"
                    - $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    ExpenseResponse:
      type: object
      description: Response for a "Expense"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Expense"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a4
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    category:
                      $ref: "#/components/schemas/_toOneRelationship"
                    transaction:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    ExpenseListResponse:
      type: object
      description: Response for a list of "Expense"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Expense"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a4
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Category:
      type: object
      description: The "Category" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            name:
              type: string
            budgetType:
              $ref: "#/components/schemas/BudgetType"
            description:
              oneOf:
                - type: "null"
                - type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            expenses:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            subscriptions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            transactions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
            anomalyPreferences:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
    CategoryCreateRequest:
      type: object
      description: Input for creating a "Category"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Category" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - name
                - budgetType
                - updatedAt
              properties:
                name:
                  type: string
                budgetType:
                  $ref: "#/components/schemas/BudgetType"
                description:
                  oneOf:
                    - type: "null"
                    - type: string
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                expenses:
                  $ref: "#/components/schemas/_toManyRelationship"
                subscriptions:
                  $ref: "#/components/schemas/_toManyRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
                anomalyPreferences:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    CategoryUpdateRequest:
      type: object
      description: Input for updating a "Category"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Category" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                name:
                  type: string
                budgetType:
                  $ref: "#/components/schemas/BudgetType"
                description:
                  oneOf:
                    - type: "null"
                    - type: string
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                expenses:
                  $ref: "#/components/schemas/_toManyRelationship"
                subscriptions:
                  $ref: "#/components/schemas/_toManyRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
                anomalyPreferences:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    CategoryResponse:
      type: object
      description: Response for a "Category"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Category"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a5
                    expenses:
                      $ref: "#/components/schemas/_toManyRelationship"
                    subscriptions:
                      $ref: "#/components/schemas/_toManyRelationship"
                    transactions:
                      $ref: "#/components/schemas/_toManyRelationship"
                    anomalyPreferences:
                      $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    CategoryListResponse:
      type: object
      description: Response for a list of "Category"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Category"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a5
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Subscription:
      type: object
      description: The "Subscription" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            amount:
              type: number
            createdAt:
              type: string
              format: date-time
            dueDate:
              type: string
              format: date-time
            status:
              $ref: "#/components/schemas/SubscriptionStatus"
            categoryId:
              type: string
            note:
              oneOf:
                - type: "null"
                - type: string
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            category:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            transactions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
    SubscriptionCreateRequest:
      type: object
      description: Input for creating a "Subscription"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Subscription" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - amount
                - dueDate
                - status
                - categoryId
              properties:
                userId:
                  type: string
                amount:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                dueDate:
                  type: string
                  format: date-time
                status:
                  $ref: "#/components/schemas/SubscriptionStatus"
                categoryId:
                  type: string
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  $ref: "#/components/schemas/_toOneRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    SubscriptionUpdateRequest:
      type: object
      description: Input for updating a "Subscription"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Subscription" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                amount:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                dueDate:
                  type: string
                  format: date-time
                status:
                  $ref: "#/components/schemas/SubscriptionStatus"
                categoryId:
                  type: string
                note:
                  oneOf:
                    - type: "null"
                    - type: string
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                category:
                  $ref: "#/components/schemas/_toOneRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    SubscriptionResponse:
      type: object
      description: Response for a "Subscription"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Subscription"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a6
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    category:
                      $ref: "#/components/schemas/_toOneRelationship"
                    transactions:
                      $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    SubscriptionListResponse:
      type: object
      description: Response for a list of "Subscription"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Subscription"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a6
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    Debt:
      type: object
      description: The "Debt" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            totalAmount:
              type: number
            paidAmount:
              type: number
            interestRate:
              oneOf:
                - type: "null"
                - type: number
            monthlyPayment:
              oneOf:
                - type: "null"
                - type: number
            status:
              $ref: "#/components/schemas/DebtStatus"
            description:
              type: string
            createdAt:
              type: string
              format: date-time
            date:
              type: string
              format: date-time
            dueDate:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            transactions:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
    DebtCreateRequest:
      type: object
      description: Input for creating a "Debt"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Debt" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - totalAmount
                - status
                - description
                - dueDate
              properties:
                userId:
                  type: string
                totalAmount:
                  type: number
                paidAmount:
                  type: number
                interestRate:
                  oneOf:
                    - type: "null"
                    - type: number
                monthlyPayment:
                  oneOf:
                    - type: "null"
                    - type: number
                status:
                  $ref: "#/components/schemas/DebtStatus"
                description:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                dueDate:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    DebtUpdateRequest:
      type: object
      description: Input for updating a "Debt"
      required:
        - data
      properties:
        data:
          type: object
          description: The "Debt" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                totalAmount:
                  type: number
                paidAmount:
                  type: number
                interestRate:
                  oneOf:
                    - type: "null"
                    - type: number
                monthlyPayment:
                  oneOf:
                    - type: "null"
                    - type: number
                status:
                  $ref: "#/components/schemas/DebtStatus"
                description:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                date:
                  type: string
                  format: date-time
                dueDate:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                transactions:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    DebtResponse:
      type: object
      description: Response for a "Debt"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/Debt"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a7
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    transactions:
                      $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    DebtListResponse:
      type: object
      description: Response for a list of "Debt"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Debt"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a7
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    UserBudgetPreference:
      type: object
      description: The "UserBudgetPreference" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            strategy:
              $ref: "#/components/schemas/BudgetAllocationStrategy"
            needsPercentage:
              type: number
            wantsPercentage:
              type: number
            savingsPercentage:
              type: number
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    UserBudgetPreferenceCreateRequest:
      type: object
      description: Input for creating a "UserBudgetPreference"
      required:
        - data
      properties:
        data:
          type: object
          description: The "UserBudgetPreference" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - updatedAt
              properties:
                userId:
                  type: string
                strategy:
                  $ref: "#/components/schemas/BudgetAllocationStrategy"
                needsPercentage:
                  type: number
                wantsPercentage:
                  type: number
                savingsPercentage:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    UserBudgetPreferenceUpdateRequest:
      type: object
      description: Input for updating a "UserBudgetPreference"
      required:
        - data
      properties:
        data:
          type: object
          description: The "UserBudgetPreference" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                strategy:
                  $ref: "#/components/schemas/BudgetAllocationStrategy"
                needsPercentage:
                  type: number
                wantsPercentage:
                  type: number
                savingsPercentage:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    UserBudgetPreferenceResponse:
      type: object
      description: Response for a "UserBudgetPreference"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/UserBudgetPreference"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a8
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    UserBudgetPreferenceListResponse:
      type: object
      description: Response for a list of "UserBudgetPreference"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/UserBudgetPreference"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a8
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    MonthlyIncomeBudget:
      type: object
      description: The "MonthlyIncomeBudget" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            monthYear:
              type: string
              format: date-time
            totalIncome:
              type: number
            needsBudget:
              type: number
            wantsBudget:
              type: number
            savingsBudget:
              type: number
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
    MonthlyIncomeBudgetCreateRequest:
      type: object
      description: Input for creating a "MonthlyIncomeBudget"
      required:
        - data
      properties:
        data:
          type: object
          description: The "MonthlyIncomeBudget" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - monthYear
                - totalIncome
                - needsBudget
                - wantsBudget
                - savingsBudget
                - updatedAt
              properties:
                userId:
                  type: string
                monthYear:
                  type: string
                  format: date-time
                totalIncome:
                  type: number
                needsBudget:
                  type: number
                wantsBudget:
                  type: number
                savingsBudget:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    MonthlyIncomeBudgetUpdateRequest:
      type: object
      description: Input for updating a "MonthlyIncomeBudget"
      required:
        - data
      properties:
        data:
          type: object
          description: The "MonthlyIncomeBudget" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                monthYear:
                  type: string
                  format: date-time
                totalIncome:
                  type: number
                needsBudget:
                  type: number
                wantsBudget:
                  type: number
                savingsBudget:
                  type: number
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    MonthlyIncomeBudgetResponse:
      type: object
      description: Response for a "MonthlyIncomeBudget"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/MonthlyIncomeBudget"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a9
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    MonthlyIncomeBudgetListResponse:
      type: object
      description: Response for a list of "MonthlyIncomeBudget"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/MonthlyIncomeBudget"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a9
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
    AnomalyPreference:
      type: object
      description: The "AnomalyPreference" model
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties:
            userId:
              type: string
            threshold:
              type: number
            emailNotifications:
              type: boolean
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        relationships:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/_toOneRelationshipWithLinks"
            monitoredCategories:
              $ref: "#/components/schemas/_toManyRelationshipWithLinks"
    AnomalyPreferenceCreateRequest:
      type: object
      description: Input for creating a "AnomalyPreference"
      required:
        - data
      properties:
        data:
          type: object
          description: The "AnomalyPreference" model
          required:
            - type
            - attributes
          properties:
            type:
              type: string
            attributes:
              type: object
              required:
                - userId
                - updatedAt
              properties:
                userId:
                  type: string
                threshold:
                  type: number
                emailNotifications:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                monitoredCategories:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    AnomalyPreferenceUpdateRequest:
      type: object
      description: Input for updating a "AnomalyPreference"
      required:
        - data
      properties:
        data:
          type: object
          description: The "AnomalyPreference" model
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                userId:
                  type: string
                threshold:
                  type: number
                emailNotifications:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            relationships:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/_toOneRelationship"
                monitoredCategories:
                  $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
    AnomalyPreferenceResponse:
      type: object
      description: Response for a "AnomalyPreference"
      required:
        - data
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          allOf:
            - $ref: "#/components/schemas/AnomalyPreference"
            - type: object
              properties:
                relationships:
                  type: object
                  properties: &a10
                    user:
                      $ref: "#/components/schemas/_toOneRelationship"
                    monitoredCategories:
                      $ref: "#/components/schemas/_toManyRelationship"
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          $ref: "#/components/schemas/_links"
    AnomalyPreferenceListResponse:
      type: object
      description: Response for a list of "AnomalyPreference"
      required:
        - data
        - links
      properties:
        jsonapi:
          $ref: "#/components/schemas/_jsonapi"
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/AnomalyPreference"
              - type: object
                properties:
                  relationships:
                    type: object
                    properties: *a10
        meta:
          $ref: "#/components/schemas/_meta"
        included:
          type: array
          items:
            $ref: "#/components/schemas/_resource"
        links:
          allOf:
            - $ref: "#/components/schemas/_links"
            - $ref: "#/components/schemas/_pagination"
  parameters:
    id:
      name: id
      in: path
      description: The resource id
      required: true
      schema:
        type: string
    include:
      name: include
      in: query
      description: Relationships to include
      required: false
      style: form
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: Fields to sort by
      required: false
      style: form
      schema:
        type: string
    page-offset:
      name: page[offset]
      in: query
      description: Offset for pagination
      required: false
      style: form
      schema:
        type: integer
    page-limit:
      name: page[limit]
      in: query
      description: Limit for pagination
      required: false
      style: form
      schema:
        type: integer
