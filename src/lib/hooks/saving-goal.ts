/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SavingGoal } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSavingGoal(options?: Omit<(UseMutationOptions<(SavingGoal | undefined), DefaultError, Prisma.SavingGoalCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalCreateArgs, DefaultError, SavingGoal, true>('SavingGoal', 'POST', `${endpoint}/savingGoal/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySavingGoal(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SavingGoalCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SavingGoal', 'POST', `${endpoint}/savingGoal/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySavingGoal<TArgs extends Prisma.SavingGoalFindManyArgs, TQueryFnData = Array<Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findMany`, args, options, fetch);
}

export function useInfiniteFindManySavingGoal<TArgs extends Prisma.SavingGoalFindManyArgs, TQueryFnData = Array<Prisma.SavingGoalGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findMany`, args, options, fetch);
}

export function useSuspenseFindManySavingGoal<TArgs extends Prisma.SavingGoalFindManyArgs, TQueryFnData = Array<Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySavingGoal<TArgs extends Prisma.SavingGoalFindManyArgs, TQueryFnData = Array<Prisma.SavingGoalGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findMany`, args, options, fetch);
}

export function useFindUniqueSavingGoal<TArgs extends Prisma.SavingGoalFindUniqueArgs, TQueryFnData = Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSavingGoal<TArgs extends Prisma.SavingGoalFindUniqueArgs, TQueryFnData = Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findUnique`, args, options, fetch);
}

export function useFindFirstSavingGoal<TArgs extends Prisma.SavingGoalFindFirstArgs, TQueryFnData = Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSavingGoal<TArgs extends Prisma.SavingGoalFindFirstArgs, TQueryFnData = Prisma.SavingGoalGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/findFirst`, args, options, fetch);
}

export function useUpdateSavingGoal(options?: Omit<(UseMutationOptions<(SavingGoal | undefined), DefaultError, Prisma.SavingGoalUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalUpdateArgs, DefaultError, SavingGoal, true>('SavingGoal', 'PUT', `${endpoint}/savingGoal/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySavingGoal(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SavingGoalUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SavingGoal', 'PUT', `${endpoint}/savingGoal/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSavingGoal(options?: Omit<(UseMutationOptions<(SavingGoal | undefined), DefaultError, Prisma.SavingGoalUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalUpsertArgs, DefaultError, SavingGoal, true>('SavingGoal', 'POST', `${endpoint}/savingGoal/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSavingGoal(options?: Omit<(UseMutationOptions<(SavingGoal | undefined), DefaultError, Prisma.SavingGoalDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalDeleteArgs, DefaultError, SavingGoal, true>('SavingGoal', 'DELETE', `${endpoint}/savingGoal/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SavingGoal, Prisma.SavingGoalGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySavingGoal(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SavingGoalDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SavingGoalDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SavingGoal', 'DELETE', `${endpoint}/savingGoal/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SavingGoalDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SavingGoalDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SavingGoalDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSavingGoal<TArgs extends Prisma.SavingGoalAggregateArgs, TQueryFnData = Prisma.GetSavingGoalAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SavingGoalAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSavingGoal<TArgs extends Prisma.SavingGoalAggregateArgs, TQueryFnData = Prisma.GetSavingGoalAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SavingGoalAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/aggregate`, args, options, fetch);
}

export function useGroupBySavingGoal<TArgs extends Prisma.SavingGoalGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SavingGoalGroupByArgs['orderBy'] } : { orderBy?: Prisma.SavingGoalGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SavingGoalGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SavingGoalGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SavingGoalGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SavingGoalGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SavingGoalGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySavingGoal<TArgs extends Prisma.SavingGoalGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SavingGoalGroupByArgs['orderBy'] } : { orderBy?: Prisma.SavingGoalGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SavingGoalGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SavingGoalGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SavingGoalGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SavingGoalGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SavingGoalGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/groupBy`, args, options, fetch);
}

export function useCountSavingGoal<TArgs extends Prisma.SavingGoalCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SavingGoalCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/count`, args, options, fetch);
}

export function useSuspenseCountSavingGoal<TArgs extends Prisma.SavingGoalCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SavingGoalCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SavingGoalCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SavingGoal', `${endpoint}/savingGoal/count`, args, options, fetch);
}

export function useCheckSavingGoal<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; userId?: string; name?: string; categoryId?: string; note?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SavingGoal', `${endpoint}/savingGoal/check`, args, options, fetch);
}
